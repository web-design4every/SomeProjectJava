/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ThreadDemo;

import java.awt.Color;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;

/**
 *
 * @author Admin
 */
public class FrmTest extends javax.swing.JFrame {
     //Khai bao 1 so thanh phan xu ly database
    Connection cnn; // Ket noi DB
    Statement stm; // Thuc thi cau lenh SQL
    ResultSet rs; // Luu tru va xu ly data
    /**
     * Creates new form FrmTest
     */
    public FrmTest() {
        initComponents();
        connect();
        loadQuestion();
        loadAnswers();
        ButtonGroup bt = new ButtonGroup();
        bt.add(rbtnA);
        bt.add(rbtnB);
        bt.add(rbtnC);
        bt.add(rbtnD);
        count();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtQuestion = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        lblTimer = new javax.swing.JLabel();
        rbtnA = new javax.swing.JRadioButton();
        rbtnC = new javax.swing.JRadioButton();
        rbtnD = new javax.swing.JRadioButton();
        rbtnB = new javax.swing.JRadioButton();
        txtB = new javax.swing.JTextField();
        txtA = new javax.swing.JTextField();
        txtC = new javax.swing.JTextField();
        txtD = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Design Preview [FrmTest]");

        jLabel1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel1.setText("Question:");

        txtQuestion.setEditable(false);
        txtQuestion.setColumns(20);
        txtQuestion.setRows(5);
        jScrollPane1.setViewportView(txtQuestion);

        jLabel2.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel2.setText("Timer:");

        lblTimer.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblTimer.setForeground(new java.awt.Color(255, 0, 0));
        lblTimer.setText("30s");

        rbtnA.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        rbtnA.setText("A");
        rbtnA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnAActionPerformed(evt);
            }
        });

        rbtnC.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        rbtnC.setText("C");
        rbtnC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnCActionPerformed(evt);
            }
        });

        rbtnD.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        rbtnD.setText("D");
        rbtnD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnDActionPerformed(evt);
            }
        });

        rbtnB.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        rbtnB.setText("B");
        rbtnB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnBActionPerformed(evt);
            }
        });

        txtB.setEditable(false);
        txtB.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N

        txtA.setEditable(false);
        txtA.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N

        txtC.setEditable(false);
        txtC.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N

        txtD.setEditable(false);
        txtD.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(lblTimer, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rbtnC)
                            .addComponent(rbtnA)
                            .addComponent(rbtnD)
                            .addComponent(rbtnB))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                    .addComponent(txtB)
                    .addComponent(txtA)
                    .addComponent(txtC, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtD))
                .addContainerGap(57, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(lblTimer))
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(70, 70, 70)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbtnA)
                    .addComponent(txtA, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbtnB)
                    .addComponent(txtB, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbtnC)
                    .addComponent(txtC, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbtnD)
                    .addComponent(txtD, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(69, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rbtnAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnAActionPerformed
       Answer();
    }//GEN-LAST:event_rbtnAActionPerformed

    private void rbtnBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnBActionPerformed
       Answer();
    }//GEN-LAST:event_rbtnBActionPerformed

    private void rbtnCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnCActionPerformed
      Answer();
    }//GEN-LAST:event_rbtnCActionPerformed

    private void rbtnDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnDActionPerformed
      Answer();
    }//GEN-LAST:event_rbtnDActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmTest().setVisible(true);
            }
        });
    }
    
    private void connect() {
        try {
            ThreadDemo.DBContext d = new ThreadDemo.DBContext();
            cnn = d.getConnection();
            JOptionPane.showMessageDialog(null, "Connect success");
            stm = cnn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
        } catch (Exception e) {
            System.out.println("Connect fail: "+e.getMessage());
        }
    }
    int number = 1;
    private void loadQuestion() {
        try {
//             stm = cnn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
             rs = stm.executeQuery("select * from tblQuestion where QuestionId = '"+String.valueOf(number)+"'");
             //Duyet tung row trong rs
             while (rs.next()) {                
                String content = rs.getString(2);
                txtQuestion.setText(content);
            }
             number++;
        } catch (Exception e) {
            System.out.println("Loi load Question: "+e.getMessage());
        }
        
    }
    
    private String questionId(){
        String content = null;
        try {
            String questionId = "select QuestionId from tblQuestion where Content = '"+txtQuestion.getText()+"'";
            rs = stm.executeQuery(questionId);
            while (rs.next()) {                
                content = rs.getString(1);
            }
        } catch (Exception e) {
            System.out.println("Loi load QuestionId: "+e.getMessage());
        }
        return content;
    }
    
    private void loadAnswers() {
        try {
//             stm = cnn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
             rs = stm.executeQuery("select * from tblAnswer where QuestionId = '"+questionId()+"'");
             //Duyet tung row trong rs
             while (rs.next()) {    
                rs.first();
                String answerA = String.valueOf(rs.getString(3));
                rs.next();
                String answerB = String.valueOf(rs.getString(3));
                rs.next();
                String answerC = String.valueOf(rs.getString(3));
                rs.next();
                String answerD = String.valueOf(rs.getString(3));
                txtA.setText(answerA);
                txtB.setText(answerB);
                txtC.setText(answerC);
                txtD.setText(answerD);
            }
             
        } catch (Exception e) {
            System.out.println("Loi load Question: "+e.getMessage());
        }
    }
    public void count(){
        Thread tc = new Thread(new Thread()){
          @Override
          public void run(){
           for (int i = 30; i >= 0; i--) {
               lblTimer.setText(i+"s");
               try {
                   Thread.sleep(1000);
               } catch (InterruptedException ex) {
                   Logger.getLogger(FrmTest.class.getName()).log(Level.SEVERE, null, ex);
               }
        }
              JOptionPane.showMessageDialog(null,"Time up!");
              loadQuestion();
              loadAnswers();
          }
        };
        tc.start();
    }
    
    public void Answer(){
        Thread td = new Thread(new Thread()){
          @Override
          public void run(){
           truthAnswer();
          }
        };
        td.start();
    }
     
    public void truthAnswer(){
       try {
//             stm = cnn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
             rs = stm.executeQuery("select * from tblAnswer where QuestionId = '"+questionId()+"'");
             //Duyet tung row trong rs
             while (rs.next()) {    
                rs.first();
                String answerA = String.valueOf(rs.getByte(4));
                rs.next();
                String answerB = String.valueOf(rs.getByte(4));
                rs.next();
                String answerC = String.valueOf(rs.getByte(4));
                rs.next();
                String answerD = String.valueOf(rs.getByte(4));
//                 if ((rbtnA.isSelected()&&answerA.equals("1"))||(rbtnB.isSelected()&&answerB.equals("1"))||
//                     (rbtnC.isSelected()&&answerC.equals("1"))||(rbtnD.isSelected()&&answerD.equals("1"))) {
//                     JOptionPane.showMessageDialog(null, "Answer correct!");
//                 }else{
//                     JOptionPane.showMessageDialog(null, "Answer wrong!");
//                 }
                 if (rbtnA.isSelected()&&answerA.equals("1")) {
                     txtA.setForeground(Color.green);
                     JOptionPane.showMessageDialog(null, "Answer correct!");
                     txtA.setForeground(Color.black);
                 }
                 else if (rbtnB.isSelected()&&answerB.equals("1")) {
                     txtB.setForeground(Color.green); 
                     JOptionPane.showMessageDialog(null, "Answer correct!");
                     txtB.setForeground(Color.black);
                 }
                 else if (rbtnC.isSelected()&&answerB.equals("1")) {
                     txtC.setForeground(Color.green); 
                     JOptionPane.showMessageDialog(null, "Answer correct!");
                     txtC.setForeground(Color.black);
                 }
                 else if (rbtnD.isSelected()&&answerB.equals("1")) {
                     txtD.setForeground(Color.green); 
                     JOptionPane.showMessageDialog(null, "Answer correct!");
                     txtD.setForeground(Color.black);
                 }else{
                     JOptionPane.showMessageDialog(null, "Answer wrong!");
                 }
            }
             
        } catch (Exception e) {
            System.out.println("Loi load Question: "+e.getMessage());
        }
       loadQuestion();
       loadAnswers();
    }
     
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTimer;
    private javax.swing.JRadioButton rbtnA;
    private javax.swing.JRadioButton rbtnB;
    private javax.swing.JRadioButton rbtnC;
    private javax.swing.JRadioButton rbtnD;
    private javax.swing.JTextField txtA;
    private javax.swing.JTextField txtB;
    private javax.swing.JTextField txtC;
    private javax.swing.JTextField txtD;
    private javax.swing.JTextArea txtQuestion;
    // End of variables declaration//GEN-END:variables
}
