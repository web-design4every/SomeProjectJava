/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package JDPC;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Admin
 */
public class FrmEmployee extends javax.swing.JFrame {
    //Khai bao 1 so thanh phan xu ly database
    Connection cnn; // Ket noi DB
    Statement stm; // Thuc thi cau lenh SQL
    ResultSet rs; // Luu tru va xu ly data
    /**
     * Creates new form FrmEmployee
     */
    public FrmEmployee() {
        initComponents();
        connect();
        loadEmployee();
        ButtonGroup bt = new ButtonGroup();
        bt.add(rbtnAsc);
        bt.add(rbtnDes);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtCode = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        txtSalary = new javax.swing.JTextField();
        txtBonus = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnSort = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbEmployee = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtResult = new javax.swing.JTextArea();
        rbtnAsc = new javax.swing.JRadioButton();
        rbtnDes = new javax.swing.JRadioButton();
        cboSort = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel1.setText("Employees Management");

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setText("Enter new employee:");

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setText("Code:");

        jLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4.setText("Name:");

        jLabel5.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel5.setText("Salary:");

        jLabel6.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel6.setText("Bonus:");

        btnAdd.setFont(new java.awt.Font("Arial", 3, 18)); // NOI18N
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnSort.setFont(new java.awt.Font("Arial", 3, 18)); // NOI18N
        btnSort.setText("Sort");
        btnSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSortActionPerformed(evt);
            }
        });

        tbEmployee.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Code", "Name", "Salary", "Bonus"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbEmployee.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbEmployeeMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbEmployee);

        jLabel7.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel7.setText("Enter code to be searched:");

        btnSearch.setFont(new java.awt.Font("Arial", 3, 18)); // NOI18N
        btnSearch.setText("Search Result");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        txtResult.setColumns(20);
        txtResult.setRows(5);
        jScrollPane2.setViewportView(txtResult);

        rbtnAsc.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        rbtnAsc.setText("Asc");

        rbtnDes.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        rbtnDes.setText("Des");

        cboSort.setFont(new java.awt.Font("Arial", 3, 14)); // NOI18N
        cboSort.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Code", "Name", "Salary" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(226, 226, 226)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnSearch)
                                .addGap(34, 34, 34)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel3)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(txtCode, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(38, 38, 38)
                                            .addComponent(jLabel4)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(jLabel5))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(btnAdd)
                                            .addGap(37, 37, 37)
                                            .addComponent(btnSort)
                                            .addGap(18, 18, 18)
                                            .addComponent(rbtnAsc)
                                            .addGap(30, 30, 30)
                                            .addComponent(rbtnDes)))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtSalary, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                                        .addComponent(cboSort, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jLabel6)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(txtBonus, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(102, 102, 102)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 564, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(72, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addGap(26, 26, 26)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(txtCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSalary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBonus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnSort)
                    .addComponent(rbtnAsc)
                    .addComponent(rbtnDes)
                    .addComponent(cboSort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSearch)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tbEmployeeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbEmployeeMouseClicked
        int index = tbEmployee.getSelectedRow();
        TableModel model = tbEmployee.getModel();
        String employeeId = model.getValueAt(index, 0).toString();
        String employeeName = model.getValueAt(index, 1).toString();
        String salary = model.getValueAt(index, 2).toString();
        String bonus = model.getValueAt(index, 3).toString();
        txtCode.setText(employeeId);
        txtName.setText(employeeName);
        txtSalary.setText(salary);
        txtBonus.setText(bonus);
    }//GEN-LAST:event_tbEmployeeMouseClicked

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        if (checkExist(txtCode.getText())) {
            JOptionPane.showMessageDialog(null, "Employee ID is existed !!");
            return;
        }
        try {
            if (checkEmpty()==true&&kiemtraBonus()==true&&kiemtraSalary()==true) {
               String strAdd = "insert into tblEmployee values ( '"+txtCode.getText()+"', '"+txtName.getText()+"', '"+txtSalary.getText()+"', '"+txtBonus.getText()+"')";
            stm.execute(strAdd);
            JOptionPane.showMessageDialog(null, "Add successfully");
            loadEmployee();
            }
        } catch (Exception e) {
            System.out.println("Loi Add: "+e.getMessage());
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSortActionPerformed
        DefaultTableModel dtm1 = (DefaultTableModel)tbEmployee.getModel();
        dtm1.setRowCount(0);
        if (rbtnAsc.isSelected()) {
        try {
             stm = cnn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
             if (cboSort.getSelectedIndex()==0) {
                rs = stm.executeQuery("select * from tblEmployee order by EmployeeCode");
            }else if(cboSort.getSelectedIndex()==1){
             rs = stm.executeQuery("select * from tblEmployee order by EmployeeName");
            }else if(cboSort.getSelectedIndex()==2){
              rs = stm.executeQuery("select * from tblEmployee order by Salary");  
            }
             while (rs.next()) {                
                //Lay thong tin cua 1 dong
                String code = rs.getString(1);
                String name = rs.getString(2);
                String salary = String.valueOf(rs.getFloat(3));
                String bonus = String.valueOf(rs.getFloat(4));
                dtm1.insertRow(dtm1.getRowCount(), new Object[]{code,name,salary,bonus});
            }
             
        } catch (Exception e) {
            System.out.println("Loi load Employee: "+e.getMessage());
        } 
        }
        if (rbtnDes.isSelected()) {
        try {
             stm = cnn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
             if (cboSort.getSelectedIndex()==0) {
                rs = stm.executeQuery("select * from tblEmployee order by EmployeeCode desc");
            }else if(cboSort.getSelectedIndex()==1){
             rs = stm.executeQuery("select * from tblEmployee order by EmployeeName desc");
            }else if(cboSort.getSelectedIndex()==2){
              rs = stm.executeQuery("select * from tblEmployee order by Salary desc");  
            }
             while (rs.next()) {                
                //Lay thong tin cua 1 dong
                String code = rs.getString(1);
                String name = rs.getString(2);
                String salary = String.valueOf(rs.getFloat(3));
                String bonus = String.valueOf(rs.getFloat(4));
                dtm1.insertRow(dtm1.getRowCount(), new Object[]{code,name,salary,bonus});
            }
             
        } catch (Exception e) {
            System.out.println("Loi load Employee: "+e.getMessage());
        }   
        }
        if (!rbtnAsc.isSelected()&&!rbtnDes.isSelected()) {
            JOptionPane.showMessageDialog(null, "Must choose sort in ascending order or descending order!");
            loadEmployee();
        }
    }//GEN-LAST:event_btnSortActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        String strSelect = "Select * from tblEmployee where EmployeeCode = '" + txtSearch.getText() + "'";
        String code, name, salary, bonus;
        try {
            stm = cnn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            rs = stm.executeQuery(strSelect);
            boolean success=true;
            while (rs.next()) {  
                success=false;
                code = rs.getString(1);
                name = rs.getString(2);
                salary = String.valueOf(rs.getFloat(3));
                bonus = String.valueOf(rs.getFloat(4));
                txtResult.setText("code: "+code+" , name: "+name+" , salary: "+salary+" , bonus: "+bonus);
            }
            if (success) {
                JOptionPane.showMessageDialog(null, "Can't found Employee Code");
                txtResult.setText("");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Enter again, Employee Code is existed");
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmEmployee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmEmployee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmEmployee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmEmployee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmEmployee().setVisible(true);
            }
        });
    }
    
    private void loadEmployee() {
        //Khoi tao doi tuong control tblSubject (design)
        DefaultTableModel dtm1 = (DefaultTableModel)tbEmployee.getModel();
        dtm1.setRowCount(0);
        try {
             stm = cnn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
             rs = stm.executeQuery("select * from tblEmployee");
             //Duyet tung row trong rs
             while (rs.next()) {                
                //Lay thong tin cua 1 dong
                String code = rs.getString(1);
                String name = rs.getString(2);
                String salary = String.valueOf(rs.getFloat(3));
                String bonus = String.valueOf(rs.getFloat(4));
//                cboUnit.addItem(unit);
                //Add vao table
                dtm1.insertRow(dtm1.getRowCount(), new Object[]{code,name,salary,bonus});
            }
             
        } catch (Exception e) {
            System.out.println("Loi load Employee: "+e.getMessage());
        }
    }
    
    private void connect() {
        try {
            DBContext d = new DBContext();
            cnn = d.getConnection();
            JOptionPane.showMessageDialog(null, "Connect success");
            stm = cnn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
        } catch (Exception e) {
            System.out.println("Connect fail: "+e.getMessage());
        }
    }
    
    private boolean checkExist(String id) {
        String strSelect = "Select * from tblEmployee where EmployeeCode = '" + id + "'";
        try {
            rs = stm.executeQuery(strSelect);
            while (rs.next()) {
                return true; // ton tai id
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Enter again, Employee Code is existed");
        }
        return false;
    }
    
    private boolean kiemtraSalary(){
        try {
            float salary = Float.parseFloat(txtSalary.getText());
            return true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Salary must be float number");
            return false;
        }
    }
    
    private boolean kiemtraBonus(){
        try {
            float bonus = Float.parseFloat(txtBonus.getText());
            return true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Bonus must be float number");
            return false;
        }
    }

    public boolean checkEmpty(){
         if (txtCode.getText().isEmpty()||txtName.getText().isEmpty()||txtSalary.getText().isEmpty()||txtBonus.getText().isEmpty()) {
             JOptionPane.showMessageDialog(null, "Must input full of information");
             return false;
         }else{
             return true;
         }
     }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSort;
    private javax.swing.JComboBox<String> cboSort;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JRadioButton rbtnAsc;
    private javax.swing.JRadioButton rbtnDes;
    private javax.swing.JTable tbEmployee;
    private javax.swing.JTextField txtBonus;
    private javax.swing.JTextField txtCode;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextArea txtResult;
    private javax.swing.JTextField txtSalary;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
